---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---

---

---

# 디버그 관리

- logger 라이브러리 이용해서 디버그

# 상태 관리
- Riverpod 사용: 전역 상태 관리는 Riverpod을 사용하여 일관성을 유지합니다.

# 폴더 구조
- MVVM + 클린 아키텍처 적용
- UI, 데이터, 도메인 레이어를 분리하여 유지보수성을 높입니다.
- 공통으로 사용하는 요소(예: 문자열, 색상, 유틸리티 함수)는 core 폴더에서 관리합니다.
lib/
├── features/                     # 기능 단위로 묶는 Feature-First 구조
│   ├── auth/                     # "로그인(연동로그인)" 관련 기능
│   │   ├── ui/                   # Presentation Layer (UI, ViewModel 등)
│   │   │   ├── view_model/
│   │   │   │   └── auth_view_model.dart
│   │   │   └── pages/            # 화면(Screens), Widgets
│   │   │       └── login_screen.dart
│   │   ├── domain/               # Domain Layer (UseCase, 엔티티)
│   │   │   ├── use_cases/
│   │   │   │   └── login_use_case.dart
│   │   │   └── entities/
│   │   │       └── user.dart
│   │   ├── data/                 # Data Layer (Repository, 모델, 서비스)
│   │       ├── models/
│   │       │   └── user_dto.dart
│   │       ├── repositories/
│   │       │   └── auth_repository.dart
│   │       └── services/
│   │           └── auth_service.dart
│   │
│   ├── home/                     # "홈화면" 관련 기능
│   │   ├── ui/
│   │   │   ├── view_model/
│   │   │   └── pages/
│   │   ├── domain/
│   │   │   ├── use_cases/
│   │   │   └── entities/
│   │   └── data/
│   │       ├── models/
│   │       ├── repositories/
│   │       └── services/
│   │
│   ├── funding/                  # "펀딩" 관련 기능
│   │   ├── ui/
│   │   │   ├── view_model/
│   │   │   └── pages/
│   │   │       ├── funding_detail_screen.dart    # 상세 (상품/브랜드)
│   │   │       ├── funding_payment_screen.dart   # 결제
│   │   ├── domain/
│   │   │   ├── use_cases/
│   │   │   │   ├── get_funding_info.dart
│   │   │   │   ├── process_payment.dart
│   │   │   └── entities/
│   │   │       └── funding.dart
│   │   └── data/
│   │       ├── models/
│   │       │   └── funding_dto.dart
│   │       ├── repositories/
│   │       │   └── funding_repository.dart
│   │       └── services/
│   │           └── funding_service.dart
│   │
│   ├── mypage/                   # "마이페이지" 관련 기능 (리뷰, 쿠폰, 내정보수정 등)
│   │   ├── ui/
│   │   │   ├── view_model/
│   │   │   └── pages/
│   │   │       ├── mypage_review_screen.dart
│   │   │       ├── mypage_coupon_screen.dart
│   │   │       └── mypage_profile_screen.dart
│   │   ├── domain/
│   │   │   ├── use_cases/
│   │   │   └── entities/
│   │   └── data/
│   │       ├── models/
│   │       ├── repositories/
│   │       └── services/
│   │
│   ├── favorites/                # "찜 페이지" 관련 기능
│   │   ├── ui/
│   │   │   ├── view_model/
│   │   │   └── pages/
│   │   │       └── favorites_list_screen.dart
│   │   ├── domain/
│   │   │   ├── use_cases/
│   │   │   └── entities/
│   │   └── data/
│   │       ├── models/
│   │       ├── repositories/
│   │       └── services/
│   │
│   └── ...                      # 이후 추가 기능들이 생길 때마다 확장
│
├── core/                        # 앱 전역에서 공통으로 사용하는 요소
│   ├── ui/                      # 재사용 가능한 위젯, 스타일, 컴포넌트
│   ├── themes/                  # 테마, 색상, 폰트 관련 설정
│   ├── exceptions/              # 커스텀 예외 처리
│   └── constants/               # 상수, enum, 공용 타입
│
├── config/                      # 빌드 환경, API 키 등 환경 설정
├── utils/                       # 범용적인 유틸 함수, 헬퍼
├── routing/                     # 라우팅 관리 (GoRouter, AutoRoute 등)
├── main_staging.dart            # 스테이징 환경 용 main
├── main_development.dart        # 개발 환경 용 main
└── main.dart                    # 앱 실행 진입점(프로덕션 환경)


// 테스트 관련 폴더 구조 예시
test/
├── features/                    # 각 기능에 대한 테스트 코드
│   ├── auth/
│   ├── home/
│   ├── funding/
│   ├── mypage/
│   └── favorites/
├── core/
└── utils/

// 테스트 용 Mock / Fake / Stub 등을 별도 폴더
testing/
├── fakes/
└── models/


# 코드 스타일 및 네이밍 규칙
- 카멜케이스(CamelCase) 네이밍 사용
- 클래스명: UpperCamelCase
- 변수 및 함수명: lowerCamelCase
- 상수: UPPER_SNAKE_CASE
- 파일명: snake_case.dart

# 컴포넌트화 및 재사용성
- 재사용 가능한 UI 및 로직을 컴포넌트화하여 모듈성을 유지합니다.
- 중복 코드 최소화 및 확장성을 고려한 설계

# 빌드 도구
- 빌드러너 사용하지 않음음
- 객체 비교 및 불변성 관리를 위해 Equatable 사용

# 브랜치 전략
- Git Flow 방식 적용
- main: 배포 가능한 안정적인 코드만 포함
- develop: 새로운 기능이 추가되거나 개선되는 브랜치
- feature/*: 새로운 기능 개발을 위한 브랜치
- release/*: 배포를 준비하는 브랜치
- hotfix/*: 긴급 버그 수정을 위한 브랜치

# 코드 품질 및 협업
- 테스트 코드 필수 작성 (단위 테스트 및 통합 테스트)
- 코드 리뷰 필수 진행 (Pull Request 기반 코드 리뷰)
- 린트(Linter) 적용 및 코드 스타일 준수
- 정기적인 리팩토링을 통해 코드 유지보수성 향상

# 문서화 및 가이드라인
- 주요 기능 및 사용법 문서화
- 클래스, 함수, API 문서화를 위한 주석 작성 필수



