---
description: 
globs: 
alwaysApply: true
---

---
# 상태 관리
- Riverpod 사용: 전역 상태 관리는 Riverpod을 사용하여 일관성을 유지합니다.

# 폴더 구조
- MVVM + 클린 아키텍처 적용
- UI, 데이터, 도메인 레이어를 분리하여 유지보수성을 높입니다.
- 공통으로 사용하는 요소(예: 문자열, 색상, 유틸리티 함수)는 core 폴더에서 관리합니다.

# 코드 스타일 및 네이밍 규칙
- 카멜케이스(CamelCase) 네이밍 사용
- 클래스명: UpperCamelCase
- 변수 및 함수명: lowerCamelCase
- 상수: UPPER_SNAKE_CASE
- 파일명: snake_case.dart

# 컴포넌트화 및 재사용성
- 재사용 가능한 UI 및 로직을 컴포넌트화하여 모듈성을 유지합니다.
- 중복 코드 최소화 및 확장성을 고려한 설계

# 빌드 도구
- 빌드러너 사용하지 않음음
- 객체 비교 및 불변성 관리를 위해 Equatable 사용

# 브랜치 전략
- Git Flow 방식 적용
- main: 배포 가능한 안정적인 코드만 포함
- develop: 새로운 기능이 추가되거나 개선되는 브랜치
- feature/*: 새로운 기능 개발을 위한 브랜치
- release/*: 배포를 준비하는 브랜치
- hotfix/*: 긴급 버그 수정을 위한 브랜치

# 코드 품질 및 협업
- 테스트 코드 필수 작성 (단위 테스트 및 통합 테스트)
- 코드 리뷰 필수 진행 (Pull Request 기반 코드 리뷰)
- 린트(Linter) 적용 및 코드 스타일 준수
- 정기적인 리팩토링을 통해 코드 유지보수성 향상

# 문서화 및 가이드라인
- 주요 기능 및 사용법 문서화
- 클래스, 함수, API 문서화를 위한 주석 작성 필수



